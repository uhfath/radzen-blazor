@using Microsoft.JSInterop
@using System.Reflection;
@inject IJSRuntime JSRuntime
@implements IDisposable
<div class="@WrapperCssClass">
    <div @ref="dialog" class="@CssClass" role="dialog" aria-labelledby="rz-dialog-0-label" style=@Style>
        @if (Dialog.Options.ShowTitle)
        {
            @if (Dialog.Options.Draggable)
            {
                <Draggable Drag="@OnDrag" DragStart="@OnDragStart">
                    <div class="rz-dialog-titlebar">
                        <div class="rz-dialog-title" style="display: inline" id="rz-dialog-0-label">
                            @if (Dialog.Options.TitleContent != null)
                            {
                                @Dialog.Options.TitleContent(Service)
                            }
                            else
                            {
                                @((MarkupString)Dialog.Title)
                            }
                        </div>
                        @if (Dialog.Options.ShowClose)
                        {
                            <a @onclick:preventDefault="true" @onclick=@Close role="button" class="rz-dialog-titlebar-icon rz-dialog-titlebar-close" tabindex=@Dialog.Options.CloseTabIndex>
                                <span class="rzi rzi-times"></span>
                            </a>
                        }
                    </div>
                </Draggable>
            }
            else
            {
                <div class="rz-dialog-titlebar">
                    <div class="rz-dialog-title" style="display: inline" id="rz-dialog-0-label">
                        @if (Dialog.Options.TitleContent != null)
                        {
                            @Dialog.Options.TitleContent(Service)
                        }
                        else
                        {
                            @((MarkupString)Dialog.Title)
                        }
                    </div>
                    @if (Dialog.Options.ShowClose)
                    {
                        <a @onclick:preventDefault="true" @onclick=@Close role="button" class="rz-dialog-titlebar-icon rz-dialog-titlebar-close" tabindex=@Dialog.Options.CloseTabIndex>
                            <span class="rzi rzi-times"></span>
                        </a>
                    }
                </div>
            }
        }
        <div class="@ContentCssClass">
            @if (Dialog.Options.ChildContent != null)
            {
                @Dialog.Options.ChildContent(Service)
            }
            else
            {
                @ChildContent
            }
        </div>
    </div>

    @if (ShowMask)
    {
        @if (Dialog.Options.CloseDialogOnOverlayClick)
        {
            <div @onclick="@Close" class="rz-dialog-mask"></div>
        }
        else
        {
            <div class="rz-dialog-mask" style="pointer-events: none;"></div>
        }
    }

</div>

@code {
    ElementReference dialog;

    string left;
    string top;
    string height;
    string width;

    double clientX;
    double clientY;

    void OnDragStart(DraggableEventArgs args)
    {
        clientX = args.ClientX;
        clientY = args.ClientY;
    }

    void OnDrag(DraggableEventArgs args)
    {
        shouldRender = false;

        left = string.Format(System.Globalization.CultureInfo.InvariantCulture, "left: {0}px;", args.Rect.Left + (args.ClientX - clientX));
        top = string.Format(System.Globalization.CultureInfo.InvariantCulture, "top: {0}px;", args.Rect.Top + (args.ClientY - clientY));

        shouldRender = true;
    }


    /// <summary>
    /// Called when resized.
    /// </summary>
    /// <param name="w">The width.</param>
    /// <param name="h">The height.</param>
    [JSInvokable("RadzenDialog.OnResize")]
    public void OnResize(double w, double h)
    {
        shouldRender = false;

        width = $"width: {w}px;";
        height = $"height: {h}px;";

        shouldRender = true;
    }

    bool shouldRender = true;
    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    [Parameter]
    public Dialog Dialog { get; set; }

    [Parameter]
    public bool ShowMask { get; set; } = true;

    RenderFragment ChildContent => new RenderFragment(builder =>
        {
            builder.OpenComponent(0, Dialog.Type);

            if (Dialog.Parameters != null)
            {
                foreach (var parameter in Dialog.Parameters)
                {
                    builder.AddAttribute(1, parameter.Key, parameter.Value);
                }
            }

            builder.AddComponentReferenceCapture(2, component => reference = component);

            builder.CloseComponent();
        });

    object reference;

    void Close()
    {
        Service.Close();
    }

    string CssClass
    {
        get
        {
            var baseCss = "rz-dialog";
            return string.IsNullOrEmpty(Dialog.Options.CssClass) ? baseCss : $"{baseCss} {Dialog.Options.CssClass}";
        }
    }

    string WrapperCssClass
    {
        get
        {
            var baseCss = "rz-dialog-wrapper";
            return string.IsNullOrWhiteSpace(Dialog.Options.WrapperCssClass) ? baseCss : $"{baseCss} {Dialog.Options.WrapperCssClass}";
        }
    }

    string ContentCssClass
    {
        get
        {
            var baseCss = "rz-dialog-content";
            return string.IsNullOrEmpty(Dialog.Options.ContentCssClass) ? baseCss : $"{baseCss} {Dialog.Options.ContentCssClass}";
        }
    }

    string Style
    {
        get
        {
            var baseStyle = "";
            var widthStyle = !string.IsNullOrEmpty(width) ? width : string.IsNullOrEmpty(Dialog.Options.Width) ? "" : $"width: {Dialog.Options.Width};";
            var heightStyle = !string.IsNullOrEmpty(height) ? height : string.IsNullOrEmpty(Dialog.Options.Height) ? "" : $"height: {Dialog.Options.Height};";
            var topStyle = !string.IsNullOrEmpty(top) ? top : string.IsNullOrEmpty(Dialog.Options.Top) ? "" : $"top: {Dialog.Options.Top};";
            var leftStyle = !string.IsNullOrEmpty(left) ? left :string.IsNullOrEmpty(Dialog.Options.Left) ? "" : $"left: {Dialog.Options.Left};";
            var bottomStyle = string.IsNullOrEmpty(Dialog.Options.Bottom) ? "" : $"bottom: {Dialog.Options.Bottom};";
            var resizeStyle = Dialog.Options.Resizable ? "resize:both;" : "";

            return $"{baseStyle}{widthStyle}{heightStyle}{topStyle}{leftStyle}{bottomStyle}{resizeStyle}{Dialog.Options.Style}";
        }
    }

    [Inject] 
    DialogService Service { get; set; }

    protected override void OnInitialized()
    {
        Service.OnRefresh += OnRefresh;
    }

    void OnRefresh()
    {
        var stateHasChanged = reference?.GetType().GetMethod("StateHasChanged", BindingFlags.NonPublic | BindingFlags.Instance);

        InvokeAsync(() => 
        {
            StateHasChanged();
            stateHasChanged?.Invoke(reference, null);
        })
        .ConfigureAwait(false);
    }

    public void Dispose()
    {
        Service.OnRefresh -= OnRefresh;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var options = Dialog.Options;

            var dialogOptions = new DialogOptions()
                {
                    Width = options != null ? !string.IsNullOrEmpty(options.Width) ? options.Width : "" : "",
                    Height = options != null ? options.Height : null,
                    Left = options != null ? options.Left : null,
                    Top = options != null ? options.Top : null,
                    Bottom = options != null ? options.Bottom : null,
                    ShowTitle = options != null ? options.ShowTitle : true,
                    ShowClose = options != null ? options.ShowClose : true,
                    Resizable = options != null ? options.Resizable : false,
                    Draggable = options != null ? options.Draggable : false,
                    Style = options != null ? options.Style : "",
                    AutoFocusFirstElement = options != null ? options.AutoFocusFirstElement : true,
                    CloseDialogOnOverlayClick = options != null ? options.CloseDialogOnOverlayClick : false,
                    CloseDialogOnEsc = options != null ? options.CloseDialogOnEsc : true,
                    CssClass = options != null ? options.CssClass : "",
                    CloseTabIndex = options != null ? options.CloseTabIndex : 0,
                };

            await JSRuntime.InvokeAsync<string>("Radzen.openDialog", dialogOptions, Service.Reference, DotNetReference);
        }
    }

    private DotNetObjectReference<DialogContainer> dotNetReference;

    /// <summary>
    /// Gets the reference for the current component.
    /// </summary>
    /// <value>The reference.</value>
    protected DotNetObjectReference<DialogContainer> DotNetReference
    {
        get
        {
            if (dotNetReference == null)
            {
                dotNetReference = DotNetObjectReference.Create(this);
            }

            return dotNetReference;
        }
    }
}