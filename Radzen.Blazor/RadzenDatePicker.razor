@using Radzen
@using Radzen.Blazor.Rendering
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions
@using System.Globalization
@using Microsoft.JSInterop

@typeparam TValue
@inherits RadzenComponent
@implements IRadzenFormComponent
@if (Visible)
{
    <div @ref="@Element" @attributes="Attributes" class="@GetCssClass()" style="@getStyle()" id="@GetId()">
        @if (!Inline)
        {
            <span class="@($"rz-calendar rz-calendar-w-btn{(Disabled ? " rz-state-disabled" : "")}")" style="width:100%">
                <input @ref="@input" @attributes="InputAttributes" disabled="@Disabled" readonly="@IsReadonly" value="@FormattedValue" tabindex="@(Disabled ? "-1" : $"{TabIndex}")"
                       @onchange="@ParseDate" autocomplete="off" type="text" name="@Name" @onkeydown="@(args => OnKeyPress(args))" @onkeydown:preventDefault=preventKeyPress @onkeydown:stopPropagation
                       class="rz-inputtext @InputClass @(IsReadonly ? "rz-readonly" : "")" id="@Name" placeholder="@Placeholder" />
                @if (ShowButton)
                {
                    <button aria-label="@ToggleAriaLabel" @onmousedown=@OnToggle class="@($"rz-datepicker-trigger rz-calendar-button rz-button rz-button-icon-only{(Disabled ? " rz-state-disabled" : "")}")" tabindex="-1" type="button">
		                <span aria-hidden="true" class="@ButtonClasses"></span><span class="rz-button-text"></span>
	                </button>
                }
                @if (AllowClear && HasValue)
                {
                    <i class="rz-dropdown-clear-icon rzi rzi-times" @onclick="@Clear" @onclick:stopPropagation="true"></i>
                }
            </span>
        }

        <Popup id="@PopupID" Lazy=@(PopupRenderMode == PopupRenderMode.OnDemand) @ref=@popup style=@PopupStyle class="@($"{(Inline ? "rz-datepicker-inline " : "")}rz-datepicker")">
                <div class="rz-datepicker-group" @onkeydown="@OnPopupKeyDown">
                    @if (!TimeOnly)
                    {
                        <div class="rz-datepicker-header">
                            <a id="@(GetId() + "pm")" tabindex="-1" aria-label="@PrevMonthAriaLabel" @onclick:preventDefault="true" class="rz-datepicker-prev" @onclick="@(async () => { if (!Disabled) { try { if(CurrentDate.AddMonths(-1).Year >= YearFrom) {CurrentDate = CurrentDate.AddMonths(-1);}} catch (ArgumentOutOfRangeException) {}} })">
                                <span class="rz-datepicker-prev-icon rzi rzi-chevron-left"></span>
                            </a>
                            <a id="@(GetId() + "nm")" tabindex="-1" aria-label="@NextMonthAriaLabel" @onclick:preventDefault="true" class="rz-datepicker-next" @onclick="@(async () => { if (!Disabled) { try { if(CurrentDate.AddMonths(1).Year <= YearTo) {CurrentDate = CurrentDate.AddMonths(1);}} catch (ArgumentOutOfRangeException) {} } })">
                                <span class="rz-datepicker-next-icon rzi rzi-chevron-right"></span>
                            </a>
                            <div class="rz-datepicker-title">
                            <RadzenDropDown @ref="monthDropDown" Style="height:auto;width:120px;margin-top:5px;text-align:left;" TabIndex="@TabIndex"
                                            TValue="int" Value="@CurrentDate.Month" Disabled="@Disabled" Data="@months" TextProperty="Name" ValueProperty="Value"
                                            Change="@((args) => { SetMonth(int.Parse(args.ToString())); })"/>
                            <RadzenDropDown @ref="yearDropDown" Style="height:auto;width:80px;margin-top:5px;text-align:left;" TabIndex="@TabIndex"
                                            TValue="int" Value="@CurrentDate.Year" Disabled="@Disabled" Data="@years" TextProperty="Name" ValueProperty="Value"
                                            Change="@((args) => { SetYear(int.Parse(args.ToString())); })"/>
                            </div>
                        </div>
                        @if(ShowDays)
                        {
                        <div class="rz-datepicker-calendar-container" tabindex="@(Disabled ? "-1" : $"{TabIndex}")" @onkeydown="@(args => OnCalendarKeyPress(args))" @onkeydown:preventDefault=preventKeyPress @onkeydown:stopPropagation>
                            <table class="rz-datepicker-calendar" style="@(Inline ? "" : "width:100%")">
                                <thead>
                                    <tr>
                                        @if (ShowCalendarWeek)
                                        {
                                            <th scope="col" class="rz-datepicker-week-number">
                                                <span>@CalendarWeekTitle</span>
                                            </th>
                                        }
                                        @foreach (var day in ShiftedAbbreviatedDayNames)
                                        {
                                            <th scope="col">
                                                <span>@day</span>
                                            </th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        int dayNumber = 0;
                                    }
                                    @for (int i = 0; i < 6; i++)
                                    {
                                        <tr>
                                            @if (ShowCalendarWeek)
                                            {
                                                <td class="rz-datepicker-other-month rz-datepicker-week-number">@Culture.Calendar.GetWeekOfYear(new DateTime(CurrentDate.Year, CurrentDate.Month, 1).AddDays(i * 7), Culture.DateTimeFormat.CalendarWeekRule, Culture.DateTimeFormat.FirstDayOfWeek)</td>
                                            }
                                            @for (int j = 0; j < 7; j++)
                                            {
                                                @if((DateTime.MaxValue - StartDate).TotalDays <= dayNumber)
                                                {
                                                    break;
                                                }

                                                DateTime date = StartDate.AddDays(dayNumber++);
                                                var dateArgs = DateAttributes(date);

                                                <td @attributes="@(dateArgs.Attributes)" class="@GetDayCssClass(date, dateArgs)" 
                                                @onclick="@(async () => { if (!Disabled && !dateArgs.Disabled) { await SetDay(date); } })">
                                                    <span class=@GetDayCssClass(date, dateArgs, false)>@date.Day</span>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        }
                        @if (FooterTemplate != null)
                        {
                            <div class="rz-datepicker-footer">
                                 @FooterTemplate
                            </div>
                        }
                    }
                </div>
                @if (ShowTime)
                {
                <div class="rz-timepicker" @onmousedown:stopPropagation>
                        <RadzenNumeric InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "hour" }})" TValue="int" Disabled="@Disabled" Value="@(HourFormat == "12" ? ((CurrentDate.Hour + 11) % 12) + 1 : CurrentDate.Hour)"
                           Min="@(HourFormat == "12" ? 1 : -1)" Max="@(HourFormat == "12" ? 12 : 24)" TValue="double" Step="@HoursStep"
                           Change="@UpdateHour" class="rz-hour-picker" @oninput=@OnUpdateHourInput Format="@(PadHours ? "00" : "")" Name="@($"{UniqueID}-h")" />
                        <div class="rz-separator">
                            <span>:</span>
                        </div>
                        <RadzenNumeric InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "minutes" }})" TValue="int" Disabled="@Disabled" Value="CurrentDate.Minute" TValue="double" Step="@MinutesStep" Min="0" Max="59"
                           Change="@UpdateMinutes" class="rz-minute-picker" @oninput=@OnUpdateHourMinutes Format="@(PadMinutes ? "00" : "")" Name="@($"{UniqueID}-m")"/>
                        @if (ShowSeconds)
                        {
                            <div class="rz-separator">
                                <span>:</span>
                            </div>
                            <RadzenNumeric InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "seconds" }})" TValue="int" Disabled="@Disabled" Value="CurrentDate.Second" TValue="double" Step="@SecondsStep" Min="0" Max="59"
                               Change="@UpdateSeconds" class="rz-second-picker" @oninput=@OnUpdateHourSeconds Format="@(PadSeconds ? "00" : "")" Name="@($"{UniqueID}-s")"/>
                        }
                        @if (HourFormat == "12")
                        {
                            <div class="rz-ampm-picker">
                                <a id="@(GetId() + "ampmup")" tabindex="@(Disabled ? "-1" : $"{TabIndex}")" aria-label="@ToggleAmPmAriaLabel" @onclick:preventDefault="true" @onclick="@ToggleAmPm">
                                    <span class="rzi rzi-chevron-up"></span>
                                </a>
                                <span>@CurrentDate.ToString("tt")</span>
                                <a id="@(GetId() + "ampmdown")" tabindex="@(Disabled ? "-1" : $"{TabIndex}")" aria-label="@ToggleAmPmAriaLabel" @onclick:preventDefault="true" @onclick="@ToggleAmPm">
                                    <span class="rzi rzi-chevron-down"></span>
                                </a>
                            </div>
                        }
                        @if (ShowTimeOkButton)
                        {
                            <button aria-label="@OkAriaLabel" type="button" class="rz-button rz-button-md rz-secondary" tabindex="0" @onclick="@OkClick">
                                <span class="rz-button-text">Ok</span>
                            </button>
                        }
                    </div>
                }
        </Popup>

    </div>
}
